/** 
 * @copyright (c) 2014- King Abdullah University of Science and
 *                      Technology (KAUST). All rights reserved.
 **/
 

/**
 * @file src/kernels/solar_1wf.ic 

 * GIRIH is a high performance stencil framework using wavefront 
 * 	diamond tiling.
 * GIRIH is provided by KAUST.
 *
 * @version 1.0.0
 * @author Tareq Malas
 * @date 2017-11-13
 **/

void swd_solar( const int shape[3], const int xb, const int yb_r, const int zb, const int xe, const int ye_r, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

  int i, j, k, t, yb, ye, zi, kt, ib, ie, kb, ke, ib_r, ie_r, bs_x, nwf;
  int nny =shape[1];
  int nnx =shape[0];
  uint64_t  ln_domain = ((uint64_t) 1)* shape[0]*shape[1]*shape[2];
  real_t * restrict u_r = u;
  real_t * restrict v_r = v;
  
  bs_x = stencil_ctx.bs_x;
  for(ib_r=xb; ib_r<xe; ib_r+=bs_x) { // blocking in X
    ie_r = (ib_r+bs_x)<(xe)?(ib_r+bs_x):(xe);
    nwf = stencil_ctx.num_wf;

    //printf("bs_x:%d  xb:%d  xe:%d  ib:%d  ie:%d\n", bs_x, xb, xe, ib, ie);
    for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)
      if(zi+nwf >= ze) nwf = ze-zi;
      yb = yb_r;
      ye = ye_r;
      ib = ib_r;
      ie = ie_r;

      kt = zi;
      for(t=tb; t< te; t++){ // Diamond blocking in time
        kb = kt; 
        ke=nwf+kt;

        // compute E-field (except at first and last time steps of right-half diamond)
        if(yb<ye) solar_e_field_kernel_naive(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx);
        // Update block size in Y
        if(t <= t_dim) ye += e_inc; // lower half of the diamond
        else         yb += b_inc; // upper half of the diamond

        // compute H-field
        if(yb<ye) solar_h_field_kernel_naive(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx);
        // Update block size in Y
        if(t < t_dim) yb -= b_inc; // lower half of the diamond
        else         ye -= e_inc; // upper half of the diamond 


        // Update block index in Z
        kt -= NHALO;
        // Update block size in X
        if (ib != xb) ib-=NHALO; 
        if (ie != xe) ie-=NHALO;

      } // diamond blocking in time (time loop)
    } // wavefront loop
  } // blocking in x
}
