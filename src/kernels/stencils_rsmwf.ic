/** 
 * @copyright (c) 2014- King Abdullah University of Science and
 *                      Technology (KAUST). All rights reserved.
 **/
 

/**
 * @file src/kernels/stencils_rsmwf.ic 

 * GIRIH is a high performance stencil framework using wavefront 
 * 	diamond tiling.
 * GIRIH is provided by KAUST.
 *
 * @version 1.0.0
 * @author Tareq Malas
 * @date 2017-11-13
 **/

void TEMPLATE(rsmwd,FUNC_NAME)( const int shape[3], const int xb, const int yb_r0, const int zb, const int xe, const int ye_r0, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

  int th_x = stencil_ctx.th_x;
  int th_y = stencil_ctx.th_y;
  int th_z = stencil_ctx.th_z;
  int th_xy = th_x*th_y;

  // at half diam use the y-threads along z-axis make sure to use sufficient number of frontlines
  if( (th_y==2) && (b_inc ==0 | e_inc==0) ){ 
    th_x *= 2;
    th_y = 1;
  }

  int i;
  const int CL=128/sizeof(uint64_t);
  volatile uint64_t *status_z, *status_xy;
  posix_memalign((void **)&status_z, 128, CL*th_z*sizeof(uint64_t));
  for(i=0; i<th_z; i++){
    status_z[i*CL]=100;
  }
  posix_memalign((void **)&status_xy, 128, CL*th_x*th_y*th_z*sizeof(uint64_t));
  for(i=0; i<th_x*th_y*th_z; i++){
    status_xy[i*CL]=10;
  }

#pragma omp parallel shared(shape, th_x, th_y, th_z, th_xy, status_xy, status_z, stencil_ctx, roc2, coef, mtid, tb, te, t_dim, NHALO) \
        firstprivate(u, v, b_inc, e_inc) \
        num_threads(stencil_ctx.thread_group_size) PROC_BIND(master)
  {
    int i, j, k, t, yb, ye, zi, kt, ib, ie, err;
    int ib_r, ie_r, thb, the, tid, gtid, q, r;
    double t_start;

    const int nny =shape[1];
    const int nnx =shape[0];
    const unsigned long nnxy = 1UL * nnx * nny;
    uint64_t  ln_domain = ((uint64_t) 1)* shape[0]*shape[1]*shape[2];
    unsigned long time_blk = te-tb; //temporal block size
    
    int tgs = stencil_ctx.thread_group_size;
    int nwf = stencil_ctx.num_wf;

    tid = 0;
    gtid = 0;
#if defined(_OPENMP)
    tid = omp_get_thread_num();
    gtid = tid + mtid * tgs;
#endif

    if(stencil_ctx.use_manual_cpu_bind == 1){
      err = sched_setaffinity(0, stencil_ctx.setsize, stencil_ctx.bind_masks[mtid*tgs+tid]);
      if(err==-1) printf("WARNING: Could not set CPU Affinity\n");
    }

    int z_lag = 1;
    if(NHALO > 1) z_lag = 0; // keep the wavefront tight for high order stencils
    if(tid ==0) z_lag-=time_blk; // first thread depends on data from prev. wavefront

    real_t * restrict u_r = u;
    real_t * restrict v_r = v;
    real_t *restrict ux, *restrict vx;
 
    uint64_t  st_z, st_xy;
    int th_nwf;

    // tid = tid_z*(th_x*th_y) + tid_y*th_x + tid_x
    int tid_x = tid%th_x;
    int tid_y = (tid/th_x)%th_y;
    int tid_z = tid/(th_x*th_y);

    int yb_r = yb_r0;
    int ye_r = ye_r0;

    if(th_y==2){
      if (tid_y%2 == 0){ // left thread
        ye_r = (yb_r + ye_r)/2;
        e_inc = 0;
      } else{
        yb_r = (yb_r + ye_r)/2;
        b_inc = 0;
      }
    }

    int nbx = (xe-xb)/th_x;
    q = (int)((xe-xb)/th_x);
    r = (xe-xb)%th_x;
    if(tid_x < r) {
      ib_r = xb + tid_x * (q+1);
      ie_r = ib_r + (q+1);
    }else {
      ib_r = xb + r * (q+1) + (tid_x - r) * q;
      ie_r = ib_r + q;
    }

    // index of neighbors at the CL-spaced status array
    int tid_z_idx = tid_z*CL;
    int left_tid_z_idx = ((tid_z+th_z-1)%th_z)*CL;

    int tid_xy_idx = tid*CL;
    int master_tid_xy_idx = tid_z*(th_y*th_x)*CL;

    int is_master_z = (int) (tid_y==0 && tid_x==0);

    th_nwf = nwf/th_z;
    thb = th_nwf*tid_z;
    the = th_nwf*(tid_z+1);

    for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)

      if(ze-zi < nwf){ 
        q = (int)((ze-zi)/th_z);
        r = (ze-zi)%th_z;
        if(tid_z < r) {
          thb = tid_z * (q+1);
          the = thb + (q+1);
        }else {
          thb = r * (q+1) + (tid_z - r) * q;
          the =thb + q;
        }
      }
      yb = yb_r;
      ye = ye_r;

      ib = ib_r;
      ie = ie_r;

      kt = zi;

/*       // prefetch entire block, one cache line per loop
      for(k=kt+nwf+thb; k<kt+nwf+the; k++){
        for(j=yb-b_inc*t_dim; j<ye+e_inc*t_dim; j++) {
          ux = &(u[1ULL*k*nnxy + j*nnx]);
          vx = &(v[1ULL*k*nnxy + j*nnx]);
          for(i=ib; i<ie; i+=(128/sizeof(real_t))) {
            _mm_prefetch((char*)&ux[i], _MM_HINT_T2);
            _mm_prefetch((char*)&vx[i], _MM_HINT_T2);
          }
        }
      }
*/
      for(t=tb; t< te; t++){ // Diamond blocking in time

        if(t%2 == 0){ //swap pointers
          u = v_r; v = u_r;
        } else{
          u = u_r; v = v_r;
        }

        for(k=kt+thb; k<kt+the; k++){
          for(j=yb; j<ye; j++) {
            ux = &(u[1ULL*k*nnxy + j*nnx]);
            vx = &(v[1ULL*k*nnxy + j*nnx]);
  #pragma simd
            for(i=ib; i<ie; i++) {
              FUNC_BODY()
            }
          }
        }

        // Synchronize
        t_start = MPI_Wtime();

        // Synchronize local threads along the z-axis
        if(th_z > 1 && t<te-1){ // the last time step does not have to synchronize
          if(is_master_z){
            st_z = status_z[tid_z_idx];
            BLOCK_COND(st_z >= status_z[left_tid_z_idx] -z_lag)
          }
        }
        // Synchronize local threads along the xy-plain
        if(th_xy>1){
          if(is_master_z){ // master thread
            st_xy = status_xy[tid_xy_idx];
            for(i=1; i<th_xy;i++){
              BLOCK_COND(st_xy == status_xy[tid_xy_idx + i*CL])
            }
            status_xy[tid_xy_idx]++;
          } else { // slave thread
            st_xy = ++status_xy[tid_xy_idx];
            BLOCK_COND(st_xy != status_xy[master_tid_xy_idx])
          }
        }
        stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;

        //update current thread time step status_z
        if((th_z>1) & (is_master_z)) status_z[tid_z_idx]++;

        // Update block size in Y
        if(t< t_dim){ // lower half of the diamond
          yb -= b_inc;
          ye += e_inc;
        }else{ // upper half of the diamond
          yb += b_inc;
          ye -= e_inc;
        }

        kt -= NHALO;

      } // diamond blocking in time (time loop)
    } // wavefront loop
  } // parallel region

  free((void*)status_z);
  free((void*)status_xy);
}
