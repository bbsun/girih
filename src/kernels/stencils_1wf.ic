void TEMPLATE(swd,FUNC_NAME)( const int shape[3], const int xb, const int yb_r, const int zb, const int xe, const int ye_r, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {
      //printf("%s %d\tSource for diamond\n", __FILE__, __LINE__);
      //@KADIR TODO CALLED ONLY DURING AUTOTUNING

  int i, j, k, t, yb, ye, zi, kt, ib, ie, ib_r, ie_r, bs_x, nwf;
  const int nny =shape[1];
  const int nnx =shape[0];
  const unsigned long nnxy = 1UL * nnx * nny;
  uint64_t  ln_domain = ((uint64_t) 1)* shape[0]*shape[1]*shape[2];
  real_t * restrict u_r = u;
  real_t * restrict v_r = v;
  real_t *restrict ux, *restrict vx;
  
  bs_x = stencil_ctx.bs_x;
  for(ib_r=xb; ib_r<xe; ib_r+=bs_x) { // blocking in X
    ie_r = (ib_r+bs_x)<(xe)?(ib_r+bs_x):(xe);
    nwf = stencil_ctx.num_wf;
    //printf("bs_x:%d  xb:%d  xe:%d  ib:%d  ie:%d\n", bs_x, xb, xe, ib, ie);
    for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)
      if(zi+nwf >= ze) nwf = ze-zi;
      yb = yb_r;
      ye = ye_r;
      ib = ib_r;
      ie = ie_r;

      kt = zi;
      for(t=tb; t< te; t++){ // Diamond blocking in time

        if(t%2 == 0){ //swap pointers
          u = v_r; v = u_r;
        } else{
          u = u_r; v = v_r;
        }

        for(k=kt; k<nwf+kt; k++){
          for(j=yb; j<ye; j++) {
            ux = &(u[1ULL*k*nnxy + j*nnx]);
            vx = &(v[1ULL*k*nnxy + j*nnx]);
  #pragma simd
            for(i=ib; i<ie; i++) {
              FUNC_BODY()
            }
          }
        }

        // Update block size in Y
        if(t< t_dim){ // lower half of the diamond
          yb -= b_inc;
          ye += e_inc;
        }else{ // upper half of the diamond
          yb += b_inc;
          ye -= e_inc;
        }

        // Update block size in X
        if (ib != xb) ib-=NHALO; 
        if (ie != xe) ie-=NHALO;

        kt -= NHALO;

      } // diamond blocking in time (time loop)
    } // wavefront loop
  } // blocking in x
}
